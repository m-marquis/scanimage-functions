function linear_scan_opto_stim(src, event, varargin)
% Custom user function to allow online control of laser power in multiple linear scan ROIs at specific times in
% each trial by counting the acquired frames and updating ROI power accordingly.
%
% First argument is a 2-element vector specifying [startTime, endTime] in seconds.
%
% Second argument specifies what laser power % to use for the photostimulation (laser power at the 
%       beginning of the acquisition will be used as the imaging laser power).

hSI = src.hSI;

switch event.EventName
    
    case 'acqModeStart'
        
        disp('Starting grab')
        
        % Get handles for stimulus and control ROIs
        allRois = hSI.hRoiManager.roiGroupLineScan;
        scanRois = []; scanRoiNums = [];
        for iRoi = 1:numel(allRois.rois)
            currRoiName = allRois.rois(iRoi).scanfields.shortDescription;
            if ~strcmp(currRoiName(7:end), 'pause') && ...
                        ~strcmp(currRoiName(7:end), 'park')
                scanRoiNums(end + 1) = iRoi;
            end
        end
        scanRois = allRois.rois(scanRoiNums);
        hStimRoi = scanRois(1);
        hControlRoi = scanRois(2);
        hImageRois = scanRois(3:end);
        
        % Setup laser power as acquisition starts
        hSI.extCustomProps.nFramesAcq = 0;
        hSI.hBeams.beamsOff();
        hSI.extCustomProps.frameCounts = {[]};
        hSI.extCustomProps.stimROIPowerLog = {[]};
        hSI.extCustomProps.controlROIPowerLog = {[]};
        hSI.extCustomProps.interleaveTrials = 0;
        hStimROI.scanfields.powers = 0.1;
        hControlROI.scanfields.powers = hSI.extCustomProps.imagingPower;
        for iRoi = 1:numel(hImageRois)
            hImageRois(iRoi).scanfields.powers = hSI.extCustomProps.imagingPower;
        end        
        hSI.hBeams.updateBeamBufferAsync(true);
        
        % Calculate stim timing
        stimTimes = varargin{1}; % [startTime, endTime]
        cps = hSI.hStackManager.scanFrameRate;
        cpt = hSI.extCustomProps.cyclesPerTrial;
        trialStartCycles = [];
        relStimStartCycle = ceil(stimTimes(1) * cps);
        relStimEndCycle = ceil(stimTimes(2) * cps);
        if relStimStartCycle < 2
            relStimStartCycle = 2;
        end
        if relStimEndCycle >= cpt
            relStimEndCycle = cpt - 1;
        end
        for iTrial = 1:hSI.extCustomProps.nTrials
            if iTrial == 1
                trialStartCycles(iTrial) = 1;
                stimStartCycles(iTrial) = relStimStartCycle;
                stimEndCycles(iTrial) = relStimEndCycle;
            else
               trialStartCycles(iTrial) = 1 + (cpt * iTrial);  
               stimStartCycles(iTrial) = trialStartCycles(iTrial) + relStimStartCycle;
               stimEndCycles(iTrial) = trialStartCycles(iTrial) + relStimEndCycle;
            end
        end
        hSI.extCustomProps.stimStartCycles = stimStartCycles;
        hSI.extCustomProps.stimEndCycles = stimEndCycles;      
        
        
        % Get stim timing power
        hSI.extCustomProps.stimROIPower = varargin{2};
        
        
        if ~isempty(stimTimes)
            hSI.extCustomProps.stimStartFrame = ceil(stimTimes(1) * fps);
            hSI.extCustomProps.stimEndFrame = ceil(stimTimes(2) * fps);
            if hSI.extCustomProps.stimStartFrame < 2
                hSI.extCustomProps.stimStartFrame = 2;
            end
            if hSI.extCustomProps.stimEndFrame >= hSI.hFastZ.numVolumes
                hSI.extCustomProps.stimEndFrame = hSI.hFastZ.numVolumes - 1;
            end
            disp(['Photostim at ', num2str(hSI.extCustomProps.stimROIPower), '% power'])
            disp(['Stim on time: ', num2str(stimTimes(1)), ' sec'])
            disp(['Stim off time: ', num2str(stimTimes(2)), ' sec'])
            disp(['Stim on from frames ', ...
                num2str(hSI.extCustomProps.stimStartFrame), ' to ', ...
                num2str(hSI.extCustomProps.stimEndFrame)])
        else
            hSI.extCustomProps.stimStartFrame = [];
            hSI.extCustomProps.stimEndFrame = [];
            disp('No photostimulation in this block');
        end
        
        disp('--------------------------------------------')
        disp('Starting trial 0...')
        
    case 'acqModeDone'
        
        disp('Block finished')
        
        % Trim the empty array off the end of the log data variables
        hSI.extCustomProps.frameCounts(end) = [];
        hSI.extCustomProps.stimROIPowerLog(end) = [];
        hSI.extCustomProps.controlROIPowerLog(end) = [];
        
        % Save log file for the block that just finished
        optoStimInfo = hSI.extCustomProps;        
        baseName = hSI.hScan2D.logFileStem;
        saveDir = hSI.hScan2D.logFilePath;
        save(fullfile(saveDir, [baseName, '.mat']), 'optoStimInfo');
        
    case 'acqDone'
        
        % Reset variables for next trial
        hSI.extCustomProps.nFramesAcq = 0;
        hSI.extCustomProps.frameCounts{end + 1} = [];
        hSI.extCustomProps.stimROIPowerLog{end + 1} = [];
        hSI.extCustomProps.controlROIPowerLog{end + 1} = [];
        disp(['Starting trial ' num2str(hSI.hScan2D.logFileCounter), '...'])
        
    case 'frameAcquired'
        
        % Get handles for stimulus and control ROIs
        allRois = hSI.hRoiManager.roiGroupLineScan.rois;
        scanRois = []; scanRoiNums = [];
        for iRoi = 1:numel(allRois)
            currRoiName = allRois(iRoi).scanfields.shortDescription;
            if ~strcmp(currRoiName(7:end), 'pause') && ...
                        ~strcmp(currRoiName(7:end), 'park')
                scanRoiNums(end + 1) = iRoi;
            end
        end
        scanRois = allRois(scanRoiNums);
        hStimRoi = scanRois(1);
        hControlRoi = scanRois(2);
        hImageRois = scanRois(3:end);
        
        % Get stim start and end frames
        stimStartFrame = hSI.extCustomProps.stimStartFrame;
        stimEndFrame = hSI.extCustomProps.stimEndFrame;
        
        % Increment frame counter
        fileCount = hSI.hScan2D.logFileCounter;
        hSI.extCustomProps.nFramesAcq = hSI.extCustomProps.nFramesAcq + 1;
        hSI.extCustomProps.frameCounts{fileCount}(end + 1) ...
            = hSI.extCustomProps.nFramesAcq;
        
        % Modify laser power if necessary
        if ~isempty(stimStartFrame)                
                if hSI.extCustomProps.nFramesAcq == stimStartFrame
                    % Switch laser power to stim ROI
                    hStimROI.powers = hSI.extCustomProps.stimROIPower;
                    hControlROI.powers = 0.3;
                    hSI.hBeams.updateBeamBufferAsync(true);
                    disp(['Setting laser to ', num2str(hSI.extCustomProps.stimROIPower), '% power in stim ROI'])
                    
                elseif hSI.extCustomProps.nFramesAcq == stimEndFrame
                    % Switch laser power to control ROI
                    hStimROI.powers = 0.3;
                    hControlROI.powers = hSI.extCustomProps.stimROIPower;
                    hSI.hBeams.updateBeamBufferAsync(true);
                    disp(['Setting laser to ', num2str(hSI.extCustomProps.stimROIPower), '% power in control ROI'])
                    
                end
        end
        
        % Record laser powers
        hSI.extCustomProps.stimROIPowerLog{hSI.hScan2D.logFileCounter}(end + 1) ...
            = hStimROI.powers;
        hSI.extCustomProps.controlROIPowerLog{hSI.hScan2D.logFileCounter}(end + 1) ...
            = hControlROI.powers;
        
end%case


end